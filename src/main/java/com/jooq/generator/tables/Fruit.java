/*
 * This file is generated by jOOQ.
 */
package com.jooq.generator.tables;


import com.jooq.generator.Indexes;
import com.jooq.generator.JooqTest;
import com.jooq.generator.Keys;
import com.jooq.generator.tables.records.FruitRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Fruit extends TableImpl<FruitRecord> {

    private static final long serialVersionUID = -1754240532;

    /**
     * The reference instance of <code>jooq-test.fruit</code>
     */
    public static final Fruit FRUIT = new Fruit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FruitRecord> getRecordType() {
        return FruitRecord.class;
    }

    /**
     * The column <code>jooq-test.fruit.id</code>.
     */
    public final TableField<FruitRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>jooq-test.fruit.name</code>.
     */
    public final TableField<FruitRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>jooq-test.fruit.price</code>.
     */
    public final TableField<FruitRecord, BigDecimal> PRICE = createField(DSL.name("price"), org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "");

    /**
     * Create a <code>jooq-test.fruit</code> table reference
     */
    public Fruit() {
        this(DSL.name("fruit"), null);
    }

    /**
     * Create an aliased <code>jooq-test.fruit</code> table reference
     */
    public Fruit(String alias) {
        this(DSL.name(alias), FRUIT);
    }

    /**
     * Create an aliased <code>jooq-test.fruit</code> table reference
     */
    public Fruit(Name alias) {
        this(alias, FRUIT);
    }

    private Fruit(Name alias, Table<FruitRecord> aliased) {
        this(alias, aliased, null);
    }

    private Fruit(Name alias, Table<FruitRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Fruit(Table<O> child, ForeignKey<O, FruitRecord> key) {
        super(child, key, FRUIT);
    }

    @Override
    public Schema getSchema() {
        return JooqTest.JOOQ_TEST;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FRUIT_PRIMARY);
    }

    @Override
    public Identity<FruitRecord, Long> getIdentity() {
        return Keys.IDENTITY_FRUIT;
    }

    @Override
    public UniqueKey<FruitRecord> getPrimaryKey() {
        return Keys.KEY_FRUIT_PRIMARY;
    }

    @Override
    public List<UniqueKey<FruitRecord>> getKeys() {
        return Arrays.<UniqueKey<FruitRecord>>asList(Keys.KEY_FRUIT_PRIMARY);
    }

    @Override
    public Fruit as(String alias) {
        return new Fruit(DSL.name(alias), this);
    }

    @Override
    public Fruit as(Name alias) {
        return new Fruit(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Fruit rename(String name) {
        return new Fruit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Fruit rename(Name name) {
        return new Fruit(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, BigDecimal> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
